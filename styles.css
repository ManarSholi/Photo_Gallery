* {
    box-sizing: border-box;
}

.gallery img {
    width: 100%;
    max-width: 350px;
    height: 300px;
    /*
        This will tell the image to fill the img container while
        maintaining aspect ratio, resulting in cropping to fit.
    */
    object-fit: cover;
}

body {
    margin: 0;
    font-family: sans-serif;
    background-color: #f5f6f7;
}

.header {
    text-align: center;
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    color: #fff;
    border-bottom: 4px solid #fdb347;  
}

.gallery {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    /*
        The justify-content property determines how the items inside a
        flex container are positioned along the main axis, affecting
        their position and the space around them.
    */
    justify-content: center;
    /*
        The align-items property positions the flex content along
        the cross axis. In this case, with your flex-direction set
        to row, your cross axis would be vertical.
    */
    align-items: center;
    padding: 20px 10px;
    max-width: 1400px;
    margin: 0 auto;
    /*
        The gap CSS shorthand property sets the gaps, also knowns
        as gutters, between rows and columns. The gap property
        and its row-gap and column-gap sub-properties provide
        this functionality for flex, grid, and multi-column
        layout. You apply the property to the container element.
    */
    gap: 16px;
    border-radius: 10px;
}

/*
    The ::after pseudo-element creates an element that is the last
    child of the selected element. You can use it to add an empty
    element after the last image. If you give it the same width as
    the images it will push the last image to the left when the
    gallery is in a two-column layout. Right now, it is in the
    center because you set justify-content: center on the flex
    container.

    Example:

    .container::after {
        content: "";
        width: 860px;
    }

    Create a new selector using an ::after pseudo-element on the
    .gallery element. Add a content property set to an empty
    string "" and 350px set for the width property.
*/
.gallery::after {
    content: "";
    width: 350px;
}
